service: famoustitle

provider:
  name: aws
  runtime: go1.x
  region: us-west-2
  stage: ${opt:stage, 'development'}
  environment:
      APP_ENV:  ${self:provider.stage}
      ELASTICSEARCH_HOST_URL: ${file(./${self:provider.stage}.yml):ELASTICSEARCH_HOST_URL}
      AWS_ID: ${file(./${self:provider.stage}.yml):AWS_ACCESS_KEY_ID}
      AWS_SECRET: ${file(./${self:provider.stage}.yml):AWS_SECRET_ACCESS_KEY}
package:
 exclude:
   - ./**
 include:
   - ./bin/**

plugins:
  - serverless-sam
  - serverless-finch
  - serverless-iam-roles-per-function

custom:
  client:
    bucketName: ${file(./${self:provider.stage}.yml):BUCKET_NAME}
    errorDocument: index.html
    objectHeaders:
      index.html:
        - name: Cache-Control
          value: max-age=0

functions:
  articles_index:
    handler: bin/articles_index
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:Scan"
        Resource: ${file(./${self:provider.stage}.yml):ARN_DB_RESOURCE_ARTICLES}
    events:
      - http:
          path: /articles
          method: get
          cors: true
  articles_create:
    handler: bin/articles_create
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:PutItem"
        Resource: ${file(./${self:provider.stage}.yml):ARN_DB_RESOURCE_ARTICLES}
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
          - "dynamodb:UpdateItem"
        Resource: ${file(./${self:provider.stage}.yml):ARN_DB_RESOURCE_USERS}
    events:
      - http:
          path: /articles
          method: post
          cors: true
  articles_show:
    handler: bin/articles_show
    events:
      - http:
          path: /articles/{id}
          method: get
          cors: true
  articles_update:
    handler: bin/articles_update
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
          - "dynamodb:UpdateItem"
        Resource: ${file(./${self:provider.stage}.yml):ARN_DB_RESOURCE_ARTICLES}
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
          - "dynamodb:UpdateItem"
        Resource: ${file(./${self:provider.stage}.yml):ARN_DB_RESOURCE_USERS}
    events:
      - http:
          path: /articles/{id}
          method: post
          cors: true
  articles_destroy:
    handler: bin/articles_destroy
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
          - "dynamodb:DeleteItem"
        Resource: ${file(./${self:provider.stage}.yml):ARN_DB_RESOURCE_ARTICLES}
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
          - "dynamodb:UpdateItem"
        Resource: ${file(./${self:provider.stage}.yml):ARN_DB_RESOURCE_USERS}
    events:
      - http:
          path: /articles/{id}
          method: delete
          cors: true
  articles_archives:
    handler: bin/articles_archives_index
    events:
      - http:
          path: /articles/archives
          method: get
          cors: true
  tokens_create:
    handler: bin/tokens_create
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
        Resource: ${file(./${self:provider.stage}.yml):ARN_DB_RESOURCE_USERS}
    events:
      - http:
          path: /tokens
          method: post
          cors: true
  users_create:
    handler: bin/users_create
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
          - "dynamodb:PutItem"
        Resource: ${file(./${self:provider.stage}.yml):ARN_DB_RESOURCE_USERS}
    events:
      - http:
          path: /users
          method: post
          cors: true
