AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: 'SAM template for Serverless framework service: '
Resources:
  ArchivesArticles:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: archives_articles_index
      Runtime: go1.x
      CodeUri: bin/
      MemorySize: 128
      Timeout: 10
      Environment:
        Variables:
          APP_ENV: development
          DOMAIN_URL: 'http://localhost:3000'
          ELASTICSEARCH_HOST_URL: 'http://datastore-es:9200'
          DYNAMODB_HOST_URL: 'http://db-dynamo:8000'
          AWS_ID: ''
          AWS_SECRET: ''
      Events:
        Event1:
          Type: Api
          Properties:
            Path: /archives/articles
            Method: get
            RestApiId:
              Ref: Famoustitle
        Event2:
          Type: Api
          Properties:
            Path: /archives/articles
            Method: options
            RestApiId:
              Ref: Famoustitle
  Famoustitle:
    Type: 'AWS::Serverless::Api'
    Properties:
      StageName: development
      DefinitionBody:
        swagger: '2.0'
        info:
          title:
            Ref: 'AWS::StackName'
        paths:
          /archives/articles:
            options:
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{ "statusCode" : 200 }'
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''get'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ArchivesArticles.Arn}/invocations
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''get'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
          /articles:
            options:
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{ "statusCode" : 200 }'
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''options,get,post'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ArticlesIndex.Arn}/invocations
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''get'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ArticlesCreate.Arn}/invocations
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''options,get,post'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
          '/articles/{id}':
            options:
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{ "statusCode" : 200 }'
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''options,get,post,delete'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ArticlesShow.Arn}/invocations
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''get'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ArticlesUpdate.Arn}/invocations
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''options,get,post'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ArticlesDestroy.Arn}/invocations
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''options,get,post,delete'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
          /tokens:
            options:
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{ "statusCode" : 200 }'
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''post'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TokensCreate.Arn}/invocations
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''post'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
          '/users_articles/verify/{id}':
            options:
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{ "statusCode" : 200 }'
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''get'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserArticlesVerify.Arn}/invocations
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''get'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
          /users:
            options:
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{ "statusCode" : 200 }'
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''post'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UsersCreate.Arn}/invocations
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''post'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
  ArchivesArticlesLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn:
      - ArchivesArticles
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: ArchivesArticles
      Principal: apigateway.amazonaws.com
  ArticlesIndex:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: articles_index
      Runtime: go1.x
      CodeUri: bin/
      MemorySize: 128
      Timeout: 10
      Environment:
        Variables:
          APP_ENV: development
          DOMAIN_URL: 'http://localhost:3000'
          ELASTICSEARCH_HOST_URL: 'http://datastore-es:9200'
          DYNAMODB_HOST_URL: 'http://db-dynamo:8000'
          AWS_ID: ''
          AWS_SECRET: ''
      Events:
        Event1:
          Type: Api
          Properties:
            Path: /articles
            Method: get
            RestApiId:
              Ref: Famoustitle
        Event2:
          Type: Api
          Properties:
            Path: /articles
            Method: options
            RestApiId:
              Ref: Famoustitle
  ArticlesIndexLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn:
      - ArticlesIndex
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: ArticlesIndex
      Principal: apigateway.amazonaws.com
  ArticlesCreate:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: articles_create
      Runtime: go1.x
      CodeUri: bin/
      MemorySize: 128
      Timeout: 10
      Environment:
        Variables:
          APP_ENV: development
          DOMAIN_URL: 'http://localhost:3000'
          ELASTICSEARCH_HOST_URL: 'http://datastore-es:9200'
          DYNAMODB_HOST_URL: 'http://db-dynamo:8000'
          AWS_ID: ''
          AWS_SECRET: ''
      Events:
        Event1:
          Type: Api
          Properties:
            Path: /articles
            Method: post
            RestApiId:
              Ref: Famoustitle
        Event2:
          Type: Api
          Properties:
            Path: /articles
            Method: options
            RestApiId:
              Ref: Famoustitle
  ArticlesCreateLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn:
      - ArticlesCreate
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: ArticlesCreate
      Principal: apigateway.amazonaws.com
  ArticlesShow:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: articles_show
      Runtime: go1.x
      CodeUri: bin/
      MemorySize: 128
      Timeout: 10
      Environment:
        Variables:
          APP_ENV: development
          DOMAIN_URL: 'http://localhost:3000'
          ELASTICSEARCH_HOST_URL: 'http://datastore-es:9200'
          DYNAMODB_HOST_URL: 'http://db-dynamo:8000'
          AWS_ID: ''
          AWS_SECRET: ''
      Events:
        Event1:
          Type: Api
          Properties:
            Path: '/articles/{id}'
            Method: get
            RestApiId:
              Ref: Famoustitle
        Event2:
          Type: Api
          Properties:
            Path: '/articles/{id}'
            Method: options
            RestApiId:
              Ref: Famoustitle
  ArticlesShowLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn:
      - ArticlesShow
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: ArticlesShow
      Principal: apigateway.amazonaws.com
  ArticlesUpdate:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: articles_update
      Runtime: go1.x
      CodeUri: bin/
      MemorySize: 128
      Timeout: 10
      Environment:
        Variables:
          APP_ENV: development
          DOMAIN_URL: 'http://localhost:3000'
          ELASTICSEARCH_HOST_URL: 'http://datastore-es:9200'
          DYNAMODB_HOST_URL: 'http://db-dynamo:8000'
          AWS_ID: ''
          AWS_SECRET: ''
      Events:
        Event1:
          Type: Api
          Properties:
            Path: '/articles/{id}'
            Method: post
            RestApiId:
              Ref: Famoustitle
        Event2:
          Type: Api
          Properties:
            Path: '/articles/{id}'
            Method: options
            RestApiId:
              Ref: Famoustitle
  ArticlesUpdateLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn:
      - ArticlesUpdate
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: ArticlesUpdate
      Principal: apigateway.amazonaws.com
  ArticlesDestroy:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: articles_destroy
      Runtime: go1.x
      CodeUri: bin/
      MemorySize: 128
      Timeout: 10
      Environment:
        Variables:
          APP_ENV: development
          DOMAIN_URL: 'http://localhost:3000'
          ELASTICSEARCH_HOST_URL: 'http://datastore-es:9200'
          DYNAMODB_HOST_URL: 'http://db-dynamo:8000'
          AWS_ID: ''
          AWS_SECRET: ''
      Events:
        Event1:
          Type: Api
          Properties:
            Path: '/articles/{id}'
            Method: delete
            RestApiId:
              Ref: Famoustitle
        Event2:
          Type: Api
          Properties:
            Path: '/articles/{id}'
            Method: options
            RestApiId:
              Ref: Famoustitle
  ArticlesDestroyLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn:
      - ArticlesDestroy
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: ArticlesDestroy
      Principal: apigateway.amazonaws.com
  TokensCreate:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: tokens_create
      Runtime: go1.x
      CodeUri: bin/
      MemorySize: 128
      Timeout: 10
      Environment:
        Variables:
          APP_ENV: development
          DOMAIN_URL: 'http://localhost:3000'
          ELASTICSEARCH_HOST_URL: 'http://datastore-es:9200'
          DYNAMODB_HOST_URL: 'http://db-dynamo:8000'
          AWS_ID: ''
          AWS_SECRET: ''
      Events:
        Event1:
          Type: Api
          Properties:
            Path: /tokens
            Method: post
            RestApiId:
              Ref: Famoustitle
        Event2:
          Type: Api
          Properties:
            Path: /tokens
            Method: options
            RestApiId:
              Ref: Famoustitle
  TokensCreateLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn:
      - TokensCreate
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: TokensCreate
      Principal: apigateway.amazonaws.com
  UserArticlesVerify:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: user_articles_verify_show
      Runtime: go1.x
      CodeUri: bin/
      MemorySize: 128
      Timeout: 10
      Environment:
        Variables:
          APP_ENV: development
          DOMAIN_URL: 'http://localhost:3000'
          ELASTICSEARCH_HOST_URL: 'http://datastore-es:9200'
          DYNAMODB_HOST_URL: 'http://db-dynamo:8000'
          AWS_ID: ''
          AWS_SECRET: ''
      Events:
        Event1:
          Type: Api
          Properties:
            Path: '/users_articles/verify/{id}'
            Method: get
            RestApiId:
              Ref: Famoustitle
        Event2:
          Type: Api
          Properties:
            Path: '/users_articles/verify/{id}'
            Method: options
            RestApiId:
              Ref: Famoustitle
  UserArticlesVerifyLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn:
      - UserArticlesVerify
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: UserArticlesVerify
      Principal: apigateway.amazonaws.com
  UsersCreate:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: users_create
      Runtime: go1.x
      CodeUri: bin/
      MemorySize: 128
      Timeout: 10
      Environment:
        Variables:
          APP_ENV: development
          DOMAIN_URL: 'http://localhost:3000'
          ELASTICSEARCH_HOST_URL: 'http://datastore-es:9200'
          DYNAMODB_HOST_URL: 'http://db-dynamo:8000'
          AWS_ID: ''
          AWS_SECRET: ''
      Events:
        Event1:
          Type: Api
          Properties:
            Path: /users
            Method: post
            RestApiId:
              Ref: Famoustitle
        Event2:
          Type: Api
          Properties:
            Path: /users
            Method: options
            RestApiId:
              Ref: Famoustitle
  UsersCreateLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn:
      - UsersCreate
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: UsersCreate
      Principal: apigateway.amazonaws.com
