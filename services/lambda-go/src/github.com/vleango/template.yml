AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: 'SAM template for Serverless framework service: '
Resources:
  Articles_index:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: bin/articles_index
      Runtime: go1.x
      CodeUri: /go/src/github.com/vleango/.serverless/tech-writer.zip
      MemorySize: 128
      Timeout: 3
      Environment:
        Variables:
          APP_ENV: development
          ELASTICSEARCH_HOST_URL: ''
          AWS_ID: ''
          AWS_SECRET: ''
      Events:
        Event1:
          Type: Api
          Properties:
            Path: /articles
            Method: get
            RestApiId:
              Ref: TechWriter
      Event2:
        Type: Api
        Properties:
          Path: /articles
          Method: options
          RestApiId:
            Ref: TechWriter
  TechWriter:
    Type: 'AWS::Serverless::Api'
    Properties:
      StageName: development
      DefinitionBody:
        swagger: '2.0'
        info:
          title:
            Ref: 'AWS::StackName'
        paths:
          /articles:
            options:
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{ "statusCode" : 200 }'
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''options,get,post'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Articles_index.Arn}/invocations
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''get'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Articles_create.Arn}/invocations
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''options,get,post'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
          '/articles/{id}':
            options:
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{ "statusCode" : 200 }'
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''options,get,post,delete'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Articles_show.Arn}/invocations
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''get'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Articles_update.Arn}/invocations
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''options,get,post'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Articles_destroy.Arn}/invocations
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''options,get,post,delete'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
          /articles/archives:
            options:
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{ "statusCode" : 200 }'
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''get'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Articles_archives.Arn}/invocations
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''get'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
          /tokens:
            options:
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{ "statusCode" : 200 }'
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''post'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Tokens_create.Arn}/invocations
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''post'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
          /users:
            options:
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{ "statusCode" : 200 }'
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''post'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Users_create.Arn}/invocations
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                      method.response.header.Access-Control-Allow-Methods: '''post'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}'
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
  Articles_indexLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn:
      - Articles_index
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: Articles_index
      Principal: apigateway.amazonaws.com
  Articles_create:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: bin/articles_create
      Runtime: go1.x
      CodeUri: /go/src/github.com/vleango/.serverless/tech-writer.zip
      MemorySize: 128
      Timeout: 3
      Environment:
        Variables:
          APP_ENV: development
          ELASTICSEARCH_HOST_URL: ''
          AWS_ID: ''
          AWS_SECRET: ''
      Events:
        Event1:
          Type: Api
          Properties:
            Path: /articles
            Method: post
            RestApiId:
              Ref: TechWriter
        Event2:
          Type: Api
          Properties:
            Path: /articles
            Method: options
            RestApiId:
              Ref: TechWriter
  Articles_createLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn:
      - Articles_create
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: Articles_create
      Principal: apigateway.amazonaws.com
  Articles_show:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: bin/articles_show
      Runtime: go1.x
      CodeUri: /go/src/github.com/vleango/.serverless/tech-writer.zip
      MemorySize: 128
      Timeout: 3
      Environment:
        Variables:
          APP_ENV: development
          ELASTICSEARCH_HOST_URL: ''
          AWS_ID: ''
          AWS_SECRET: ''
      Events:
        Event1:
          Type: Api
          Properties:
            Path: '/articles/{id}'
            Method: get
            RestApiId:
              Ref: TechWriter
  Articles_showLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn:
      - Articles_show
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: Articles_show
      Principal: apigateway.amazonaws.com
  Articles_update:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: bin/articles_update
      Runtime: go1.x
      CodeUri: /go/src/github.com/vleango/.serverless/tech-writer.zip
      MemorySize: 128
      Timeout: 3
      Environment:
        Variables:
          APP_ENV: development
          ELASTICSEARCH_HOST_URL: ''
          AWS_ID: ''
          AWS_SECRET: ''
      Events:
        Event1:
          Type: Api
          Properties:
            Path: '/articles/{id}'
            Method: post
            RestApiId:
              Ref: TechWriter
  Articles_updateLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn:
      - Articles_update
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: Articles_update
      Principal: apigateway.amazonaws.com
  Articles_destroy:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: bin/articles_destroy
      Runtime: go1.x
      CodeUri: /go/src/github.com/vleango/.serverless/tech-writer.zip
      MemorySize: 128
      Timeout: 3
      Environment:
        Variables:
          APP_ENV: development
          ELASTICSEARCH_HOST_URL: ''
          AWS_ID: ''
          AWS_SECRET: ''
      Events:
        Event1:
          Type: Api
          Properties:
            Path: '/articles/{id}'
            Method: delete
            RestApiId:
              Ref: TechWriter
  Articles_destroyLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn:
      - Articles_destroy
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: Articles_destroy
      Principal: apigateway.amazonaws.com
  Articles_archives:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: bin/articles_archives_index
      Runtime: go1.x
      CodeUri: /go/src/github.com/vleango/.serverless/tech-writer.zip
      MemorySize: 128
      Timeout: 3
      Environment:
        Variables:
          APP_ENV: development
          ELASTICSEARCH_HOST_URL: ''
          AWS_ID: ''
          AWS_SECRET: ''
      Events:
        Event1:
          Type: Api
          Properties:
            Path: /articles/archives
            Method: get
            RestApiId:
              Ref: TechWriter
  Articles_archivesLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn:
      - Articles_archives
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: Articles_archives
      Principal: apigateway.amazonaws.com
  Tokens_create:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: bin/tokens_create
      Runtime: go1.x
      CodeUri: /go/src/github.com/vleango/.serverless/tech-writer.zip
      MemorySize: 128
      Timeout: 3
      Environment:
        Variables:
          APP_ENV: development
          ELASTICSEARCH_HOST_URL: ''
          AWS_ID: ''
          AWS_SECRET: ''
      Events:
        Event1:
          Type: Api
          Properties:
            Path: /tokens
            Method: post
            RestApiId:
              Ref: TechWriter
  Tokens_createLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn:
      - Tokens_create
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: Tokens_create
      Principal: apigateway.amazonaws.com
  Users_create:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: bin/users_create
      Runtime: go1.x
      CodeUri: /go/src/github.com/vleango/.serverless/tech-writer.zip
      MemorySize: 128
      Timeout: 3
      Environment:
        Variables:
          APP_ENV: development
          ELASTICSEARCH_HOST_URL: ''
          AWS_ID: ''
          AWS_SECRET: ''
      Events:
        Event1:
          Type: Api
          Properties:
            Path: /users
            Method: post
            RestApiId:
              Ref: TechWriter
  Users_createLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn:
      - Users_create
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: Users_create
      Principal: apigateway.amazonaws.com
